?LifeCycleSavings
LifeCycleSavings
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
df <- LifeCycleSavings %>%
rownames_to_column() %>% # Zeilennamen sollen eigene Spalte werden
as_tibble() %>%
select(country = rowname, sr, pop15, pop75, dpi, ddpi) %>%
mutate_at(vars(-country), scale) %>%  # Daten standardisieren, sodass Mittelwert = o und Varianz = 1
print()
# Cluster berechnen
hc <- df %>%   # Daten einsetzen
dist %>%     # berechne Distanzmatrix (fuer nummerische Datentypen)
hclust(method = "complete") # berechne hierachische Cluster via Complete Linkage
# Dendrogramm plotten; relative Schriftgroesse durch cex,
# alle Labels auf gleicher Ebene durch hang = -1
hc %>% plot(labels = df$country, cex = 0.8, hang = -1)
# Anzahl der Gruppen "k" festlegen (z.B. k = 5) und farblich abgrenzen
# Grenzfarben waehlen: border = 1 (schwarz), 2 (rot), 3 (grün),
# 4 (blau), 5 (hellblau), 6 (violet); auch als Farbpalette c("blue", ...)
hc %>% rect.hclust(k = 5, border = 2:6)
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
df <- LifeCycleSavings %>%
rownames_to_column() %>% # Zeilennamen sollen eigene Spalte werden
as_tibble() %>%
select(country = rowname, sr, pop15, pop75, dpi, ddpi) %>%
mutate_at(vars(-country), scale) %>%  # Daten standardisieren, sodass Mittelwert = o und Varianz = 1
print()
# Dendrogramm plotten; relative Schriftgroesse durch cex,
# alle Labels auf gleicher Ebene durch hang = -1
hc %>% plot(labels = df$country, cex = 0.8, hang = -1)
df <- LifeCycleSavings %>%
rownames_to_column() %>% # Zeilennamen sollen eigene Spalte werden
as_tibble() %>%
select(country = rowname, sr, pop15, pop75, dpi, ddpi) %>%
mutate_at(vars(-country), scale) %>%  # Daten standardisieren, sodass Mittelwert = o und Varianz = 1
print()
# Cluster berechnen
hc <- df %>%   # Daten einsetzen
dist %>%     # berechne Distanzmatrix (fuer nummerische Datentypen)
hclust(method = "complete") # berechne hierachische Cluster via Complete Linkage
# Dendrogramm plotten; relative Schriftgroesse durch cex,
# alle Labels auf gleicher Ebene durch hang = -1
hc %>% plot(labels = df$country, cex = 0.8, hang = -1)
# Cluster berechnen
hc <- df %>%   # Daten einsetzen
dist %>%     # berechne Distanzmatrix (fuer nummerische Datentypen)
hclust(method = "single") # berechne hierachische Cluster via Single Linkage
# Dendrogramm plotten; relative Schriftgroesse durch cex,
# alle Labels auf gleicher Ebene durch hang = -1
hc %>% plot(labels = df$country, cex = 0.8, hang = -1)
# Cluster berechnen
hc <- df %>%   # Daten einsetzen
dist %>%     # berechne Distanzmatrix (fuer nummerische Datentypen)
hclust(method = "complete") # berechne hierachische Cluster via Single Linkage
# Dendrogramm plotten; relative Schriftgroesse durch cex,
# alle Labels auf gleicher Ebene durch hang = -1
hc %>% plot(labels = df$country, cex = 0.8, hang = -1)
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
df <- LifeCycleSavings %>%
rownames_to_column() %>% # Zeilennamen sollen eigene Spalte werden
as_tibble() %>%
select(country = rowname, sr, pop15, pop75, dpi, ddpi) %>%
mutate_at(vars(-country), scale) %>%  # Daten standardisieren, sodass Mittelwert = o und Varianz = 1
print()
# Cluster berechnen
hc <- df %>%   # Daten einsetzen
dist %>%     # berechne Distanzmatrix (fuer nummerische Datentypen)
hclust(method = "complete") # berechne hierachische Cluster via Single Linkage
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Dendrogramme fuer Clusteranalysen
# Datei:  Dendrogramm.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?LifeCycleSavings
LifeCycleSavings
df <- LifeCycleSavings %>%
rownames_to_column() %>% # Zeilennamen sollen eigene Spalte werden
as_tibble() %>%
select(country = rowname, sr, pop15, pop75, dpi, ddpi) %>%
mutate_at(vars(-country), scale) %>%  # Daten standardisieren, sodass Mittelwert = o und Varianz = 1
print()
# Cluster berechnen
hc <- df %>%   # Daten einsetzen
dist %>%     # berechne Distanzmatrix (fuer nummerische Datentypen)
hclust(method = "complete") # berechne hierachische Cluster via Single Linkage
# Dendrogramm plotten; relative Schriftgroesse durch cex,
# alle Labels auf gleicher Ebene durch hang = -1
hc %>% plot(labels = df$country, cex = 0.8, hang = -1)
# Anzahl der Gruppen "k" festlegen (z.B. k = 5) und farblich abgrenzen
# Grenzfarben waehlen: border = 1 (schwarz), 2 (rot), 3 (grün),
# 4 (blau), 5 (hellblau), 6 (violet); auch als Farbpalette c("blue", ...)
hc %>% rect.hclust(k = 5, border = 2:6)
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Challenge Visualisierung
# Datei:  Challenge_Visualisierung.R
#
##############################################################################
# 1. Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
# 2. Datensatz laden
ChickWeight
?ChickWeight
# 3. Boxplot, Differenzierung nach Gruppe
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
ggtitle('Points by Diet')
# 4. Je Gruppe ein eigener Boxplot
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
facet_grid(Diet ~ .) +
ggtitle('Points by Diet')
##############################################################################
# ZUSATZ######################################################################
# 3. Streudiagramm, Differenzierung nach Gruppe
ggplot(ChickWeight,
aes(Time, weight,
color = Diet)) +
geom_point(size = 1.5) +
geom_smooth(method = lm, formula = y ~ x)
# 4. Je Gruppe ein eigenes Streudiagramm
ggplot(ChickWeight,
aes(Time, weight,
color = Diet)) +
geom_point(size = 1.5) +
facet_grid(Diet ~ .) +
geom_smooth(method = lm, formula = y ~ x)
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Challenge Visualisierung
# Datei:  Challenge_Visualisierung.R
#
##############################################################################
# 1. Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
# 2. Datensatz laden
ChickWeight
?ChickWeight
# 3. Boxplot, Differenzierung nach Gruppe
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
ggtitle('Points by Diet')
# 4. Je Gruppe ein eigener Boxplot
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
facet_grid(Diet ~ .) +
ggtitle('Points by Diet')
##############################################################################
# ZUSATZ######################################################################
# 3. Streudiagramm, Differenzierung nach Gruppe
ggplot(ChickWeight,
aes(Time, weight,
color = Diet)) +
geom_point(size = 1.5) +
geom_smooth(method = lm, formula = y ~ x)
# 4. Je Gruppe ein eigenes Streudiagramm
ggplot(ChickWeight,
aes(Time, weight,
color = Diet)) +
geom_point(size = 1.5) +
facet_grid(Diet ~ .) +
geom_smooth(method = lm, formula = y ~ x)
# Environemt leeren
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Challenge Visualisierung
# Datei:  Challenge_Visualisierung.R
#
##############################################################################
# 1. Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
# 2. Datensatz laden
ChickWeight
?ChickWeight
# 3. Boxplot, Differenzierung nach Gruppe
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
ggtitle('Points by Diet')
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Challenge Visualisierung
# Datei:  Challenge_Visualisierung.R
#
##############################################################################
# 1. Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
# 2. Datensatz laden
ChickWeight
?ChickWeight
# 3. Boxplot, Differenzierung nach Gruppe
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
ggtitle('Points by Diet')
# 4. Je Gruppe ein eigener Boxplot
ggplot(ChickWeight , aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot() +
facet_grid(Diet ~ .) +
ggtitle('Points by Diet')
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Erstellen von Histogramme fuer Beispieldaten
# Datei:  Histogramme.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?PlantGrowth
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 30, data = PlantGrowth)
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 25, data = PlantGrowth)
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 1, data = PlantGrowth)
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 2, data = PlantGrowth)
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 30, data = PlantGrowth)
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Erstellen von Histogramme fuer Beispieldaten
# Datei:  Histogramme.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?PlantGrowth
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 30, data = PlantGrowth)
# Gruppierte Histogramme
qplot(weight,
geom = "histogram",
bins = 30,
fill = group,
data = PlantGrowth)
# Gruppierte Dichteplots
qplot(weight,
geom = "density",
fill = group,
data = PlantGrowth)
# Histogramm
PlantGrowth %>%
ggplot(aes(x = weight,
fill = group)) +
geom_histogram(bins = 30) +
theme(legend.position = "bottom")
# Dichteplot
PlantGrowth %>%
ggplot(aes(x = weight,
fill = group)) +
geom_density(alpha = 0.5) +
theme(legend.position = "bottom")
rm(list = ls())
# Pakete aus Global Environmant entfernen
p_unload(all)  #Befehl erfordert Paket "pacman"
# Grafiken entfernen
graphics.off()
# Konsole leeren
cat("\014")
# Titel:  Erstellen von Histogramme fuer Beispieldaten
# Datei:  Histogramme.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(datasets, pacman, tidyverse)
############################################################
# Daten laden
?PlantGrowth
PlantGrowth
# Einfaches Histogramm
qplot(weight, geom = "histogram", bins = 30, data = PlantGrowth)
# Titel:  Streudiagramme mit gefitteter Regressionsfunktion
# Datei:  Streudiagramme_Regressionsfunktion.R
#
############################################################
# Daten installieren und laden
# Wenn mehrere Pakete gleichzeitig geladen werden sollen,
# empfiehlt sich der Paketmanager "pacman"
if (!require("pacman")) install.packages("pacman")
# Pakete mit p_load von "pacman" laden
pacman::p_load(pacman, tidyverse)
############################################################
# Daten laden
# Importieren der Daten mit readr::read_csv() von tidyverse
# und Aufbereiten (zusaetzliche "Group"- Variable generieren)
df <- read_csv("Daten/abalone.data") %>%
mutate(Group =
ifelse(Sex == "F" | Sex == "M", "A", "I")) %>%
mutate(Group = as.factor(Group)) %>%
print()
summary(df)
